@using Meme_Platform.Extensions
@using Meme_Platform.Core.Models

@model HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="col-lg-8">
        <div id="posts-container">
            @await Component.InvokeAsync("PostsPage", new { page = 1 })
        </div>
        <div class="d-flex justify-content-center progress-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>
    <div class="col-lg-4 sidebar">
        <div class="card">
            <img class="card-img-top" src="/Profile/Avatar" />
            <div class="card-header">
                <i class="fa fa-user"></i> @ViewBag.UserProfile.Nickname
                <a id="edit-profile-btn" class="float-right text-primary" href="#" data-toggle="modal" data-target="#edit-profile-modal"><i class="fa fa-user-edit"></i></a>
            </div>

            <div class="card-body"><i class="fa fa-images"></i> Posts: @ViewBag.UserProfile.PostsCount</div>
            <div class="card-body"><i class="fa fa-vote-yea"></i> Votes: @ViewBag.UserProfile.VotesCount</div>
            <div class="card-body"><i class="fa fa-comments"></i> Comments: @ViewBag.UserProfile.CommentsCount</div>
            <div class="card-body"><i class="fa fa-arrow-circle-up"></i> Top score: @ViewBag.UserProfile.MaxScore</div>
            <a class="card-footer btn btn-primary" href="@Url.Action("Create", "Posts")">
                <span class="fa fa-upload"></span>
                Upload
            </a>
        </div>

        @if (Model.PostOfTheDay != null)
        {
            <div class="card">
                <div class="card-header">Post of the day:</div>
                <div class="card-body">
                    <a href="/Posts/View/@(Model.PostOfTheDay.Id)">
                        @string.Format(
                            "{0} with {1} points!",
                            Model.PostOfTheDay.Title,
                            Model.PostOfTheDay.Votes.Sum(v => (int)v.Type))
                    </a>
                    <div class="post-preview">
                        <a href="/Posts/View/@(Model.PostOfTheDay.Id)">
                            <img src="@(Model.PostOfTheDay.Content.GetImageUrl())" />
                        </a>
                    </div>
                </div>
            </div>
        }
        <div class="card">
            <div class="card-header">Top contributors:</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var contributor in Model.TopContributors)
                    {
                        <li class="list-group-item">
                            <img width="30" src="@Url.Content(contributor.ProfilePictureUrl)" />
                            @contributor.Nickname
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="card">
            <div class="card-header">Top posts:</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var post in Model.TopPosts)
                    {
                        <li class="list-group-item">
                            <a href="/Posts/View/@(post.Id)">
                                @string.Format(
                                    "{0} with {1} points!",
                                    post.Title,
                                    post.Votes.Sum(v => (int)v.Type))
                            </a>
                            <div class="post-preview">
                                <a href="/Posts/View/@(post.Id)">
                                    @if (post.Content.ContentType == ContentType.Image)
                                    {
                                        <img src="@(post.Content.GetImageUrl())" />
                                    }
                                    else
                                    {
                                        <img src="@(post.Content.GetYoutubeThumbnail())" />
                                    }
                                </a>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@await Component.InvokeAsync("EditProfile")


@section scripts{
    <script src="~/js/voting-functions.js"></script>
    <script src="~/js/posts-loader.js"></script>

    <script>
        $(function () {
            $(".nsfw-overlay").on("click", function () {
                $(this).slideUp();
            });

            $('#save-profile-btn').on('click', function () {
                var profileData = {
                    nickName: $('#profile-nickname').val(),
                    profilePictureURL: $('#profile-avatar-url').val()
                };

                $(this).hide();
                $('#saving-profile-btn').removeClass('d-none');
                $.post('@Url.Action("Update", "Profile")', profileData, function () {
                    window.location.href = '/';
                }).error(function () {
                    toastr["error"]("Server error!", "Oof");
                });
            });
        });
    </script>
}